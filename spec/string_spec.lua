--
package.path = "../?.lua;" .. package.path
require 'busted.runner'()
require 'init'
--

describe('String Functions', function()
    describe('_:camelCase(str)', function()
        it('should convert `str` to camel case', function()
            assert.are.equals(_:camelCase('Foo Bar'), 'fooBar')
            assert.are.equals(_:camelCase('--foo-bar--'), 'fooBar')
            assert.are.equals(_:camelCase('__FOO_BAR__'), 'fooBar')
        end)
    end)

    describe('_:capitalize(str)', function()
        it('should convert first letter of each word of `str` to upper case and remaining to lowercase', function()
            assert.are.equals(_:capitalize('FOO'), 'Foo')
            assert.are.equals(_:capitalize('foo bar'), 'Foo Bar')
        end)
    end)

    describe('_:endsWith(str, target, [position=_:size(str)])', function()
        it('check if `str` ends with `target` up until end `position`', function()
            assert.are.equals(_:endsWith('abc', 'c'), true)
            assert.are.equals(_:endsWith('abc', 'b'), false)
            assert.are.equals(_:endsWith('abc', 'b', 2), true)
        end)
    end)

    describe('_:kebabCase(str)', function()
        it('should convert `str` to kebab case', function()
            assert.are.equals(_:kebabCase('Foo Bar'), 'foo-bar')
            assert.are.equals(_:kebabCase('fooBar'), 'foo-bar')
            assert.are.equals(_:kebabCase('__FOO_BAR__'), 'foo-bar')
        end)
    end)

    describe('_:lowerCase(str)', function()
        it('should convert `str` to lower-case, space-separated words', function()
            assert.are.equals(_:lowerCase('---Foo-Bar--'), 'foo bar')
            assert.are.equals(_:lowerCase('fooBar'), 'foo bar')
            assert.are.equals(_:lowerCase('__FOO_BAR__'), 'foo bar')
        end)
    end)

    describe('_:lowerFirst(str)', function()
        it('should convert first character in `str` to lowercase', function()
            assert.are.equals(_:lowerFirst('Foo'), 'foo')
            assert.are.equals(_:lowerFirst('FOO'), 'fOO')
        end)
    end)

    describe('_:pad(str, [length=0], [chars=" "])', function()
        it('should pad `str` on both sides, if shorter than `length`, with `chars`', function()
            assert.are.equals(_:pad('abc', 8), '  abc   ')
            assert.are.equals(_:pad('abc', 8, '_-'), '_-abc_-_')
            assert.are.equals(_:pad('abc', 3), 'abc')
        end)
    end)

    describe('_:padEnd(str, [length=0], [chars=" "])', function()
        it('pad end of `str`, if shorter than `length`, with `chars`', function()
            assert.are.equals(_:padEnd('abc', 6), 'abc   ')
            assert.are.equals(_:padEnd('abc', 6, '_-'), 'abc_-_')
            assert.are.equals(_:padEnd('abc', 3), 'abc')
        end)
    end)

    describe('_:padStart(str, [length=0], [chars=" "])', function()
        it('pad beginning of `str`, if shorter than `length`, with `chars`', function()
            assert.are.equals(_:padStart('abc', 6), '   abc')
            assert.are.equals(_:padStart('abc', 6, '_-'), '_-_abc')
            assert.are.equals(_:padStart('abc', 3), 'abc')
        end)
    end)

    describe('_:rep(str, [n=1])', function()
        it('repeats given `str` `n` times', function()
            assert.are.equals(_:rep('*', 6), '******')
            assert.are.equals(_:rep('abc', 2, '_-'), 'abcabc')
            assert.are.equals(_:rep('abc', 0), '')
        end)
    end)

    describe('_:replace(str, pattern, repl)', function()
        it('replaces matches in `str` using `pattern` with `repl`', function()
            assert.are.equals(_:replace('Hi Fred', 'Fred', 'Barney'), 'Hi Barney')
            assert.are.equals(_:replace('Hello World', '(%w+)', '%1 %1'), 'Hello Hello World World')
        end)

        it('replaces `n`-th match in `str` using `pattern` with `repl`', function()
            assert.are.equals(_:replace('Hello, World! Hello, Everyone!', 'Hello', 'Goodbye', 1), 'Goodbye, World! Hello, Everyone!')
        end)
    end)

    describe('_:snakeCase(str)', function()
        it('should convert `str` to snake case', function()
            assert.are.equals(_:snakeCase('Foo Bar'), 'foo_bar')
            assert.are.equals(_:snakeCase('fooBar'), 'foo_bar')
            assert.are.equals(_:snakeCase('--FOO-BAR--'), 'foo_bar')
        end)
    end)

    describe('_:split(str, separator, [limit=_:size(str)])', function()
        it('should split `str` by `separator`, truncated by `limit` elements', function()
            assert.are.same(_:split('a-b-c-', '-'), {'a', 'b', 'c'})
            assert.are.same(_:split('a-b-c', '-', 2), {'a', 'b'})
        end)
    end)

    describe('_:startCase(str)', function()
        it('converts `str` to start case', function()
            assert.are.equals(_:startCase('--foo-bar--'), 'Foo Bar')
            assert.are.equals(_:startCase('fooBar'), 'Foo Bar')
            assert.are.equals(_:startCase('__FOO_BAR__'), 'FOO BAR')
        end)
    end)

    describe('_:startsWith(str, target, [position=1])', function()
        it('check if `str` begins with `target` starting at `position`', function()
            assert.is_true(_:startsWith('abc', 'a'))
            assert.is_false(_:startsWith('abc', 'b'))
            assert.is_true(_:startsWith('abc', 'b', 2))
        end)
    end)

    describe('_:toLower(str)', function()
        it('converts entire `str` to lower case', function()
            assert.are.equals(_:toLower('--Foo-Bar--'), '--foo-bar--')
            assert.are.equals(_:toLower('fooBar'), 'foobar')
            assert.are.equals(_:toLower('__FOO_BAR__'), '__foo_bar__')
        end)
    end)

    describe('_:toUpper(str)', function()
        it('converts entire `str` to upper case', function()
            assert.are.equals(_:toUpper('--foo-bar--'), '--FOO-BAR--')
            assert.are.equals(_:toUpper('fooBar'), 'FOOBAR')
            assert.are.equals(_:toUpper('__foo_bar__'), '__FOO_BAR__')
        end)
    end)

    describe('_:trim(str, [pattern="%s+"])', function()
        it('removes leading and trailing white space', function()
            assert.are.equals(_:trim('  abc  '), 'abc')
        end)

        it('removes leading and trailing specified `pattern` (using characters)', function()
            assert.are.equals(_:trim('-_-abc-_-', '_-'), 'abc')
        end)

        it('removes leading and trailing specified `pattern` (using pattern)', function()
            assert.are.equals(_:trim('-_-abc-_-', '%p+'), 'abc')
        end)
    end)

    describe('_:trimEnd(str, [pattern="%s+"])', function()
        it('removes trailing white space', function()
            assert.are.equals(_:trimEnd('  abc  '), '  abc')
        end)

        it('removes trailing specified `pattern` (using characters)', function()
            assert.are.equals(_:trimEnd('-_-abc-_-', '_-'), '-_-abc')
        end)

        it('removes trailing specified `pattern` (using pattern)', function()
            assert.are.equals(_:trimEnd('-_-abc-_-', '%p+'), '-_-abc')
        end)
    end)

    describe('_:trimStart(str, [pattern="%s+"])', function()
        it('removes leading white space', function()
            assert.are.equals(_:trimStart('  abc  '), 'abc  ')
        end)

        it('removes leading specified `pattern` (using characters)', function()
            assert.are.equals(_:trimStart('-_-abc-_-', '_-'), 'abc-_-')
        end)

        it('removes leading specified `pattern` (using pattern)', function()
            assert.are.equals(_:trimStart('-_-abc-_-', '%p+'), 'abc-_-')
        end)
    end)

    describe('_:truncate(str, [options])', function()
        it('correctly truncates `str` with `options.length` set to default', function()
            assert.are.equals(_:truncate('hi-diddly-ho there, neighborino'), 'hi-diddly-ho there, neighbo...')
        end)

        it('correctly truncates `str` with `options.length` and `separator` altered', function()
            assert.are.equals(_:truncate('hi-diddly-ho there, neighborino', {length = 24, separator = ' '}), 'hi-diddly-ho...')
            assert.are.equals(_:truncate('hi-diddly-ho there, neighborino', {length = 24, separator = '[,?]%s+'}), 'hi-diddly-ho there...')
        end)

        it('correctly truncates `str` with `options.omission` altered', function()
            assert.are.equals(_:truncate('hi-diddly-ho there, neighborino', {omission= ' [...]'}), 'hi-diddly-ho there, neig [...]')
        end)
    end)

    describe('_:upperCase(str)', function()
        it('should convert `str` to space-separated, uppercase string', function()
            assert.are.equals(_:upperCase('--foo-bar'), 'FOO BAR')
            assert.are.equals(_:upperCase('fooBar'), 'FOO BAR')
            assert.are.equals(_:upperCase('__foo_bar__'), 'FOO BAR')
        end)
    end)

    describe('_:upperFirst(str)', function()
        it('converts first character of `str` to uppercase', function()
            assert.are.equals(_:upperFirst('foo'), 'Foo')
            assert.are.equals(_:upperFirst('FOO'), 'FOO')
        end)
    end)

    describe('_:words(str, [pattern="%a+"])', function()
        it('converts `str` into table of words', function()
            assert.are.same(_:words('lister, cat, & kryton'), {'lister', 'cat', 'kryton'})
            assert.are.same(_:words('lister, cat, & kryton', "[^,%s]+"), {'lister', 'cat', '&', 'kryton'})
        end)
    end)
end)