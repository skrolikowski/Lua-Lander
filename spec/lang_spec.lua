--
package.path = "../?.lua;" .. package.path
require 'busted.runner'()
require 'init'
--

describe('Lang Functions', function()
    describe('_:isAssociative(var)', function()
        it('should return true if `var` is not an associative table, otherwise false', function()
            assert.are.equals(_:isAssociative({}), false)
            assert.are.equals(_:isAssociative({a = 1, 2, 'c'}), false)
            assert.are.equals(_:isAssociative({a = 1, b = 2}), true)
        end)
    end)

    describe('_:isBoolean(var)', function()
        it('should return true if `var` is not a boolean value, otherwise false', function()
            assert.are.equals(_:isBoolean('true'), false)
            assert.are.equals(_:isBoolean(true), true)
        end)
    end)

    describe('_:isEmpty(var)', function()
        it('should return true if `var` is an empty value', function()
            assert.are.equals(_:isEmpty(''), true)
            assert.are.equals(_:isEmpty('abc'), false)
            assert.are.equals(_:isEmpty(false), true)
            assert.are.equals(_:isEmpty(true), false)
            assert.are.equals(_:isEmpty(0), true)
            assert.are.equals(_:isEmpty(1), false)
            assert.are.equals(_:isEmpty({}), true)
            assert.are.equals(_:isEmpty({1, 2, 3}), false)
            assert.are.equals(_:isEmpty(nil), true)
        end)
    end)

    describe('_:isFunction(var)', function()
        it('should return true if `var` is not a function, otherwise false', function()
            assert.are.equals(_:isFunction(function() return 'Hello World!' end), true)
            assert.are.equals(_:isFunction('Hello World!'), false)
        end)
    end)

    describe('_:isNaN(var)', function()
        it('should return true if `var` is not a number, otherwise false', function()
            assert.are.equals(_:isNaN('123'), true)
            assert.are.equals(_:isNaN(123), false)
        end)
    end)

    describe('_:isNil(var)', function()
        it('should return true if `var` is nil, otherwise false', function()
            assert.are.equals(_:isNil('abc'), false)
            assert.are.equals(_:isNil(nil), true)
        end)
    end)

    describe('_:isNumber(var)', function()
        it('should return true if `var` is a number, otherwise false', function()
            assert.are.equals(_:isNumber('abc'), false)
            assert.are.equals(_:isNumber(42), true)
        end)
    end)

    describe('_:isSequence(var)', function()
        it('should return true if `var` is a sequence, otherwise false', function()
            assert.are.equals(_:isSequence({1, 3, 5, 6, 7}), true)
            assert.are.equals(_:isSequence({a = 1, b = 3, 4, 8}), false)
            assert.are.equals(_:isSequence({1, 4, 2, 10, 6}), false)
        end)
    end)

    describe('_:isSet(var)', function()
        it('should return true if `var` is a set, otherwise false', function()
            assert.are.equals(_:isSet({3, 3, 5, 6, 6}), false)
            assert.are.equals(_:isSet({a = 1, b = 3, 4, 8}), false)
            assert.are.equals(_:isSet({1, 4, 2, 10, 6}), true)
        end)
    end)

    describe('_:isString(var)', function()
        it('should return true if `var` is a string, otherwise false', function()
            assert.are.equals(_:isString('abc'), true)
            assert.are.equals(_:isString(42), false)
        end)
    end)

    describe('_:isTable(var)', function()
        it('should return true if `var` is a table, otherwise false', function()
            assert.are.equals(_:isTable('abc'), false)
            assert.are.equals(_:isTable({'a', 'b', 'c'}), true)
        end)
    end)

    describe('_:isRegexPattern(var)', function()
        it('should return true if `var` is a regex pattern, otherwise false', function()
            assert.are.equals(_:isRegexPattern('abc'), false)
            assert.are.equals(_:isRegexPattern('^abc'), false)
            assert.are.equals(_:isRegexPattern('[abc]'), true)
            assert.are.equals(_:isRegexPattern('%a+'), true)
        end)
    end)

    describe('_:isThread(var)', function()
        it('should return true if `var` is a thread, otherwise false', function()
            assert.are.equals(_:isThread('I am a thread!'), false)
            assert.are.equals(_:isThread(coroutine.create(function() end)), true)
        end)
    end)

end)