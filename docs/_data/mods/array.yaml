link: https://github.com/skrolikowski/Lua-Lander/blob/master/mods/array.lua
items:
##########################
# chunki
##########################
- name: chunki
  line: L38
  sign: _:chunki(tabl, [size=1])
  tags: ['table']
  text:
    - >
      Splits elements of `tabl` into groups of `size`.
  note:
    - >
      Only returns numeric indexes of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to split into chunks.
    - name: size
      type: number=1
      text: Size of each chunk.
  returns:
    - name:
      type: table
      text: Returns new table of table chunks.
  examples:
    - test: _:chunki({'a', 'b', 'c', 'd'}, 2)
      resp: {{'a', 'b'}, {'c', 'd'}}
    - test: _:chunki({'a', 'b', 'c', 'd'}, 3)
      resp: {{'a','b','c'}, {'d'}}
    - test: _:chunki({'a', 'b', c=1, d=2})
      resp: {{'a'}, {'b'}}
    - test: _:chunki({'a', 'b', c=1, d=2}, 4)
      resp: {{'a','b'}}
##########################
# differencei
##########################
- name: differencei
  line: L67
  sign: _:differencei(tabl, other)
  tags: ['table', 'array']
  text:
    - >
      Creates copy of `tabl`, excluding any same values from `other`.
  note:
    - >
      Only affects numeric indexes of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: other
      type: table
      text: The table to compare.
  returns:
    - name:
      type: table
      text: Returns new table without intersecting values.
  examples:
    - test: _:differencei({2, 1}, {2, 3})
      resp: {1}
    - test: _:differencei({2, 1}, {2, 1})
      resp: {}
    - test: _:differencei({2, 1}, {4, 6})
      resp: {2, 1}
    - test: _:differencei({1, 2, 8, a=3, b=4}, {2, 4})
      resp: {1, 8, a=3, b=4}
##########################
# drop
##########################
- name: drop
  line: L95
  sign: _:drop(tabl, [num])
  tags: ['table', 'array']
  text:
    - >
      Creates copy of `tabl` dropping `n` x elements from beginning (or ending if `n` is negative).
  note:
    - >
      Only affects numeric indexes of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: num
      type: number
      text: The number of elements to drop.
  returns:
    - name:
      type: table
      text: Returns new table minus `num` of elements.
  examples:
    - test: _:drop({2, 1, 2, 3}, 1)
      resp: {2, 1, 2}
    - test: _:drop({2, 1, 2, 3}, 3)
      resp: {2}
    - test: _:drop({2, 1, 2, 3}, -1)
      resp: {1, 2, 3}
    - test: _:drop({2, 1, 2, 3}, -3)
      resp: {3}
##########################
# fill
##########################
- name: fill
  line: L127
  sign: _:fill(tabl, value, [n=_:size(tabl)], [fromIndex=1])
  tags: ['table', 'array']
  text:
    - >
      Fills new `tabl` with `n` x `value` starting at `fromIndex`
  note:
    - >
      Only affects numeric indexes of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: value
      type: mixed
      text: Value to populate array with.
    - name: n
      type: number=_:size(tabl)
      text: The number of times to repeat `value`.
    - name: fromIndex
      type: number=1
      text: Position to start at.
  returns:
    - name:
      type: table
      text: Returns new table with filled values.
  examples:
    - test: _:fill({1, 2, 3, 4}, 8, 2, 4)
      resp: {1, 2, 3, 8, 8}
    - test: _:fill({}, 'hello', 3, 2)
      resp: {'hello', 'hello', 'hello'}
    - test: _:fill({2, 1, 3, a=4, b=6}, 9, 4)
      resp: {9, 9, 9, 9, a=4, b=6}
##########################
# findIndex
##########################
- name: findIndex
  line: L153
  sign: _:findIndex(tabl, predicate, [fromIndex=1])
  tags: ['table', 'array']
  text:
    - >
      Returns first index (starting from `formIndex`) of `tabl` where `predicate` returns a truthy value.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: predicate
      type: function
      text: Function that invokes on every element.
    - name: fromIndex
      type: number=1
      text: Position to start at.
  returns:
    - name:
      type: number
      text: Returns index of found element, otherwise nil.
  examples:
    - test: _:findIndex({1, -2, 4, 7}, function(v, k) return v > 1 end)
      resp: 3
    - test: _:findIndex({true, false, 'abc'}, 'isBoolean')
      resp: 1
    - test: _:findIndex({true, false, 'abc'}, 'isBoolean', 3)
      resp: nil
    - test: _:findIndex({'a', 'b', 'c'}, 'isBoolean')
      resp: nil
##########################
# findLastIndex
##########################
- name: findLastIndex
  line: L176
  sign: _:findLastIndex(tabl, predicate, [fromIndex=#tabl])
  tags: ['table', 'array']
  text:
    - >
      Returns first index (starting from `formIndex` and moving to the left) of
      `tabl` where `predicate` returns a truthy value.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: predicate
      type: function
      text: Function that invokes on every element.
    - name: fromIndex
      type: number=#tabl
      text: Position to start at (from right to left).
  returns:
    - name:
      type: number
      text: Returns index of found element, otherwise nil.
  examples:
    - test: _:findLastIndex({1, -2, 4, 7}, function(v, k) return v > 1 end)
      resp: 4
    - test: _:findLastIndex({true, false, 'abc'}, 'isBoolean')
      resp: 2
##########################
# head
##########################
- name: head
  line: L198
  sign: _:head(tabl)
  tags: ['table', 'array']
  text:
    - >
      Returns first indexed value of `tabl`.
  note:
    - >
      Only affects indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
  returns:
    - name:
      type: mixed
      text: Returns value at head of array.
  examples:
    - test: _:head({c=10, 'a', 'b', 1})
      resp: 'a'
    - test: _:head({})
      resp: nil
##########################
# indexOf
##########################
- name: indexOf
  line: L211
  sign: _:indexOf(tabl, value)
  tags: ['table', 'array']
  text:
    - >
      Returns index of first occurrence of `value` in `tabl`, checking only numeric-indexes.
  note:
    - >
      Only checks indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: value
      type: mixed
      text: The value to search for.
  returns:
    - name:
      type: number
      text: Returns index of first occurrence of `value`.
  examples:
    - test: _:indexOf({1, 5, 'r', 3}, 'r')
      resp: 3
    - test: _:indexOf({4, 2, 8, 1}, 3)
      resp: nil
    - test: _:indexOf({c=10, 'a', 'b', 1}, 'a')
      resp: 1
##########################
# initial
##########################
- name: initial
  line: L228
  sign: _:initial(tabl)
  tags: ['table', 'array']
  text:
    - >
      Creates copy of `table` including all elements but the tail.
  note:
    - >
      Only affects indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
  returns:
    - name:
      type: table
      text: Returns new table without last index.
  examples:
    - test: _:initial({1, 5, 'r', 3})
      resp: {1, 5, 'r'}
    - test: _:initial({4})
      resp: {}
    - test: _:initial({c=10, 'a', 'b', 1})
      resp: {'a', 'b', c=10}
##########################
# lastIndexOf
##########################
- name: lastIndexOf
  line: L245
  sign: _:lastIndexOf(tabl, value)
  tags: ['table', 'array']
  text:
    - >
      Returns index of last occurrence of `value` in `tabl`, checking only numeric-indexes.
  note:
    - >
      Only checks indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: value
      type: mixed
      text: The value to search for.
  returns:
    - name:
      type: number
      text: Returns index of last occurrence of `value`.
  examples:
    - test: _:lastIndexOf({1, 1, 2, 2, 3, 3}, 2)
      resp: 4
    - test: _:lastIndexOf({4, 2, 8, 1}, 3)
      resp: nil
    - test: _:lastIndexOf({'a', 'b', 'a', c=10}, 'a')
      resp: 3
##########################
# join
##########################
- name: join
  line: L262
  sign: _:join(tabl, separator)
  tags: ['table', 'array']
  text:
    - >
      Converts all numeric-indexed elements in `tabl` to string separated by `separator`.
  note:
    - >
      Only affects indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: separator
      type: string
      text: The string to use as glue.
  returns:
    - name:
      type: string
      text: Returns table elements as string joined together by `separator`.
  examples:
    - test: _:join({'a', 'b', 'c'}, '~')
      resp: 'a~b~c'
    - test: _:join({3, 2, 5, a='x', b='y'})
      resp: '3,2,5'
##########################
# mapi
##########################
- name: mapi
  line: L279
  sign: _:mapi(tabl, iteratee)
  tags: ['table', 'array']
  text:
    - >
      Creates copy of `tabl`, invoking `iteratee` on every element.
  note:
    - >
      Only affects indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: iteratee
      type: function
      text: The function invoked per element.
  returns:
    - name:
      type: table
      text: Returns new table modified.
  examples:
    - test: _:mapi({'a', 'b', 'c'}, string.upper)
      resp: {'A', 'B', 'C'}
    - test: _:mapi({a='x', b='y', 'c', 2, 1}, 'isNumber')
      resp: {a='x', b='y', false, true, true}
##########################
# nth
##########################
- name: nth
  line: L302
  sign: _:nth(tabl, [n=0])
  tags: ['table', 'array']
  text:
    - >
      Returns `n`-th indexed value of `tabl`.
      Negative `n`-values will count from the right.
  note:
    - >
      Only affects indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: n
      type: number=0
      text: The index requested.
  returns:
    - name:
      type: mixed
      text: Returns value at requested index.
  examples:
    - test: _:nth({'a', 'b', 1, c=10}, 2)
      resp: 'b'
    - test: _:nth({1, 2, 3, b=1, c=2}, -2)
      resp: 2
    - test: _:nth({1, 2, 3, b=1, c=2}, 4)
      resp: nil
##########################
# reverse
##########################
- name: reverse
  line: L324
  sign: _:reverse(tabl)
  tags: ['table', 'array']
  text:
    - >
      Returns copy of `tabl` reversing order of numeric indexes.
  note:
    - >
      Only affects indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
  returns:
    - name:
      type: mixed
      text: Returns new table in reverse order.
  examples:
    - test: _:reverse({'a', 'b', 1, c=10})
      resp: {1, 'b', 'a', c=10}
##########################
# shuffle
##########################
- name: shuffle
  line: L345
  sign: _:shuffle(tabl)
  tags: ['table', 'array']
  text:
    - >
      Creates copy of `tabl` and shuffles it using <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" class="text-blue-500">Fisher-Yates shuffle</a>.
  note:
    - >
      Only affects indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
  returns:
    - name:
      type: mixed
      text: Returns new table in shuffled order.
  examples:
    - test: _:shuffle({'a', 'b', 1, c=10})
      resp: {'b', 'a', 1, c=10}
##########################
# tail
##########################
- name: tail
  line: L367
  sign: _:tail(tabl)
  tags: ['table', 'array']
  text:
    - >
      Returns last indexed value of `tabl`.
  note:
    - >
      Only affects indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
  returns:
    - name:
      type: mixed
      text: Returns value at tail of array.
  examples:
    - test: _:tail({'a', 'b', 1, c=10})
      resp: 1
    - test: _:tail({})
      resp: nil
##########################
# without
##########################
- name: without
  line: L380
  sign: _:without(tabl, ...)
  tags: ['table', 'array']
  text:
    - >
      Creates new table of values from `tabl` excluding all elements with `...`
      as it's value.
  note:
    - >
      Only affects indexed elements of `tabl`.
  arguments:
    - name: tabl
      type: table
      text: The table to process.
    - name: ...
      type: mixed
      text: Values to exclude from new array.
  returns:
    - name:
      type: table
      text: Returns new table without `...` values.
  examples:
    - test: _:without({1,2,3,3,5,6,6}, 3, 6)
      resp: {1, 2, 5}
    - test: _:without({1,2,3,3,5,6,6})
      resp: {1, 2, 3, 3, 5, 6, 6}
    - test: _:without({1,2,3,3,5,6,6}, 1, 2, 3, 5, 6)
      resp: {}
    - test: _:without({'a','b','c',d=10}, 'b', 10)
      resp: {'a', 'c', d=10}
    - test: _:without({'a','b','c',d=10}, 'a', 'b', 'c')
      resp: {d=10}