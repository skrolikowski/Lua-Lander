link: https://github.com/skrolikowski/Lua-Lander/blob/master/mods/table.lua
items:
##########################
# chunk
##########################
- name: chunk
  line: L122
  sign: _:chunk(tabl, [size=1])
  tags: ['table']
  text:
    - >
      Splits elements of `tabl` into groups of `size`.
  warn:
    - >
      This will chunk both named and numeric-indexed values of `tabl`.
      Use <a href="#chunki" class="text-blue-500">_:chunki</a> to just chunk numeric-indexed values.
  arguments:
    - name: tabl
      type: table
      text: The table to split into chunks.
    - name: size
      type: number=1
      text: Size of each chunk.
  returns:
    - name:
      type: table
      text: Returns new table of table chunks.
  examples:
    - test: _:chunk({'a','b','c','d'}, 2)
      resp: {{'a','b'},{'c','d'}}
    - test: _:chunk({'a','b','c','d'}, 3)
      resp: {{'a','b','c'},{'d'}}
##########################
# combine
##########################
- name: combine
  line: L153
  sign: _:combine(keys, values)
  tags: ['table']
  text:
    - >
      Creates new table with `keys` as keys and `values` as values.
  warn:
    - >
      Requirement: both tables must be equal in size.
  arguments:
    - name: keys
      type: table
      text: Table values will be used as keys in new table.
    - name: values
      type: table
      text: Table values will be used as values in new table.
  returns:
    - name:
      type: table
      text: Returns new table with keys from `keys` table and values from `values` table.
  examples:
    - test: _:combine({'a', 'b'}, {'c','d'})
      resp: {a = 'c', b = 'd'}
    - test: _:combine({1, 2, 3}, {5, 4, 3})
      resp: {5, 4, 3}
    - test: _:combine({1, 2, 3, a='x', b='y'}, {5, 4, 3, c='w', d='z'})
      resp: {a = 'c', b = 'd'}
    - test: _:combine({'a', 'b'}, {'c','d', 'e'})
      resp: throws error! table sizes not equal
##########################
# compact
##########################
- name: compact
  line: L176
  sign: _:compact(tabl)
  tags: ['table']
  text:
    - >
      Creates copy of `tabl` with Lua-falsy values filtered out.
  warn:
    - >
      Requirement: both tables must be equal in size.
  arguments:
    - name: tabl
      type: table
      text: The table to inspect.
  returns:
    - name:
      type: table
      text: Returns new table without falsey values.
  examples:
    - test: _:compact({0, 1, false, '', 2, nil, 3})
      resp: {0, 1, '', 2, 3 }
    - test: _:compact({a = 1, 5, b = false, 'foo', c = true})
      resp: {a = 1, 5, 'foo', c = true}
##########################
# conformsTo
##########################
- name: conformsTo
  line: L190
  sign: _:conformsTo(value, source)
  tags: ['table']
  text:
    - >
      Determines if `value` conforms to `source`, by invoking the predicate properties of
      source with corresponding propery values of `value`.
  arguments:
    - name: value
      type: table
      text: The table to inspect.
    - name: source
      type: table
      text: The table of property predicates to conform to.
  returns:
    - name:
      type: table
      text: Returns new table with
  examples:
    - test: _:conformsTo({a=2, b=4, c=6}, {b = function(v,k) return v < 2 end})
      resp: false
    - test: _:conformsTo({1, 2, 3, a='x', b='y'}, {'isString'})
      resp: false
    - test: _:conformsTo({a=2, b=4, c=6}, {b = function(v,k) return v > 2 end})
      resp: true
    - test: _:conformsTo({1, 2, 3, a='x', b='y'}, {'isNumeric'})
      resp: true
##########################
# flatten
##########################
- name: flatten
  line: L226
  sign: _:flatten(tabl)
  tags: ['table']
  text:
    - >
      Creates new `tabl` flattened one level deep.
  arguments:
    - name: value
      type: table
      text: The table to flatten.
  returns:
    - name:
      type: table
      text: Returns new flattened table.
  examples:
    - test: _:flatten({1, 2, {3, {4}}, 5})
      resp: {1, 2, 3, {4}, 5}
    - test: _:flatten({1, {2, {3, {4}}, 5}})
      resp: {1, 2, {3, {4}}, 5}
##########################
# flattenDeep
##########################
- name: flattenDeep
  line: L249
  sign: _:flattenDeep(tabl)
  tags: ['table']
  text:
    - >
      Creates new `tabl`, recursively flattening table.
  arguments:
    - name: value
      type: table
      text: The table to flatten.
  returns:
    - name:
      type: table
      text: Returns new recursively flattened table.
  examples:
    - test: _:flattenDeep({1, 2, {3, {4}}, 5})
      resp: {1, 2, 3, 4, 5}
    - test: _:flattenDeep({1, {2, {3, {4}}, 5}})
      resp: {1, 2, 3, 4, 5}
##########################
# filter
##########################
- name: filter
  line: L283
  sign: _:filter(tabl, iteratee)
  tags: ['table']
  text:
    - >
      Creates copy of `tabl` with values that fail `iteratee` filtered out.
  note:
    - >
      `iteratee` will receive arguments:<br />
      <ul>
        <li>`value`</li>
        <li>'key'</li>
      </ul>
  arguments:
    - name: value
      type: table
      text: The table to inspect.
    - name: iteratee
      type: function
      text: Function invoked on every element.
  returns:
    - name:
      type: table
      text: Returns new filtered table.
  examples:
    - test: _:filter({1, false, nil, 'abc'}, 'isTruthy')
      resp: {1, 'abc'}
    - test: _:filter({2, 1, 3, a=4, b=6}, function(v, k) return _:isNumber(k) end)
      resp: {2, 1, 3}
    - test: _:filter({1, 2, 3, 4, 5}, function(v, k) return v > 3 end)
      resp: {4, 5}
##########################
# find
##########################
- name: find
  line: L307
  sign: _:find(tabl, predicate)
  tags: ['table']
  text:
    - >
      Return first element in `tabl`, which `predicate` returns a truthy value.
  arguments:
    - name: value
      type: table
      text: The table to inspect.
    - name: predicate
      type: function
      text: Function invoked on every element.
  returns:
    - name:
      type: mixed
      text: Returns first found element's value.
    - name:
      type: mixed
      text: Returns first found element's key.
  examples:
    - test: _:find({a=1,b=2,c=2,d=4,e=5}, function(v, k) return v == 2 end)
      resp: {2, 'b'}
    - test: _:find({1, 2, 3, 4, 5}, 'isString')
      resp: nil
##########################
# keys
##########################
- name: keys
  line: L325
  sign: _:keys(tabl)
  tags: ['table']
  text:
    - >
      Creates new table made up of keys from `tabl`.
  arguments:
    - name: value
      type: table
      text: The table to inspect.
  returns:
    - name:
      type: table
      text: Returns new table with keys of `tabl`.
  examples:
    - test: _:keys({'a', 'b', 'c'})
      resp: {1, 2, 3}
    - test: _:keys({a=1, b=2, c=3})
      resp: {'a', 'b', 'c'}
##########################
# map
##########################
- name: map
  line: L338
  sign: _:map(tabl, iteratee)
  tags: ['table']
  text:
    - >
      Creates new table executing `iteratee` on every element of `tabl`.
  arguments:
    - name: value
      type: table
      text: The table to inspect.
    - name: iteratee
      type: function
      text: Function invoked on every element.
  returns:
    - name:
      type: table
      text: Returns new table with updated values.
  examples:
    - test: _:map({'a', 'b', 'c'}, string.upper)
      resp: {'A', 'B', 'C'}
    - test: _:map({a='x', b='y', c=2, d='z'}, 'isString')
      resp: {a=true, b=true, c=false, d=true}
##########################
# merge
##########################
- name: merge
  line: L360
  sign: _:merge(...)
  tags: ['table']
  text:
    - >
      Creates new table merging from left to right.
  warn:
    - >
      Overwritting will occur when existing key found.
  arguments:
    - name: ...
      type: table
      text: Series of tables to merge.
  returns:
    - name:
      type: table
      text: Returns new table with all tables merged.
  examples:
    - test: _:merge({1, 2, 3, 4}, {2, 3, 4, 5})
      resp: {1, 2, 3, 4, 2, 3, 4, 5}
    - test: _:merge({a=1, b=2, 3, 4}, {c=2, b=3, 4, 5})
      resp: {3, 4, 4, 5, a=1, b=3, c=2}
##########################
# resize
##########################
- name: resize
  line: L380
  sign: _:resize(tabl, size)
  tags: ['table']
  text:
    - >
      Creates copy of `tabl`, resized to `size`.
  arguments:
    - name: tabl
      type: table
      text: The table to inspect
    - name: size
      type: number
      text: Size of new table.
  returns:
    - name:
      type: table
      text: Returns newly sized table.
  examples:
    - test: _:resize({'a', 'b', 'c', 'd'}, 3)
      resp: {'a', 'b', 'c'}
    - test: _:resize({'a', 'b', 'c', 'd'}, 0)
      resp: {}
    - test: _:resize({'a', 'b', 'c', 'd'}, -1)
      resp: {'d'}
    - test: _:resize({'a', 'b', 'c', 'd'}, -3)
      resp: {'b', 'c', 'd'}
    - test: _:resize({'a', 'b', 'c', 'd'}, 5)
      resp: {'a', 'b', 'c', 'd'}
##########################
# unique
##########################
- name: unique
  line: L403
  sign: _:unique(tabl)
  tags: ['table']
  text:
    - >
      Creates unique set of elements, dropping duplicate indices.
  arguments:
    - name: tabl
      type: table
      text: The table to inspect
  returns:
    - name:
      type: table
      text: Returns new table without duplicates.
  examples:
    - test: _:unique({'a', 'd', 'b', 'c', 'c', 'd'})
      resp: {'a', 'd', 'b', 'c'}
    - test: _:unique({a = 1, b = 2, c = 2, d = 3})
      resp: {a = 1, c = 2, d = 3}
##########################
# values
##########################
- name: values
  line: L420
  sign: _:values(tabl)
  tags: ['table']
  text:
    - >
      Creates new table made up of values from `tabl`.
  arguments:
    - name: value
      type: table
      text: The table to inspect.
  returns:
    - name:
      type: table
      text: Returns new table with values of `tabl`.
  examples:
    - test: _:values({'a', 'b', 'c'})
      resp: {1, 2, 3}
    - test: _:values({a=1, b=2, c=3}
      resp: {1, 2, 3}